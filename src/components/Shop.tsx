import React, { useState, useEffect } from 'react';
import { PlayerProgress, addRewards, getPlayerProgress, savePlayerProgress } from '../services/playerService'; // getPlayerProgress, savePlayerProgress
import Character from './Character';
// import { Equipment, getPlayerEquipment, purchaseEquipment, equipItem, unequipItem } from '../services/equipmentService'; // <--- –£–î–ê–õ–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import { Equipment } from '../data/equipmentData'; // <--- –ò–º–ø–æ—Ä—Ç Equipment
import { getOwnedEquipment, addOwnedItem, getAvailableForPurchaseEquipment } from '../services/inventoryService'; // <--- –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
import { getEquippedItems, equipItem as equipItemService, unequipItem as unequipItemService } from '../services/equippedGearService'; // <--- –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
import Casino from './Secret';
import './Secret.css';
import './Shop.css';

interface ShopProps {
  // playerProgress: PlayerProgress; // –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
  onReturnToMenu: () => void;
  onEquipmentPurchased: (updatedProgress: PlayerProgress) => void;
}

const Shop: React.FC<ShopProps> = ({ /* playerProgress, */ onReturnToMenu, onEquipmentPurchased }) => { // playerProgress —É–¥–∞–ª–µ–Ω –∏–∑ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏
  const [currentGold, setCurrentGold] = useState<number>(0);
  const [availableForPurchase, setAvailableForPurchase] = useState<Equipment[]>([]);
  const [ownedEquipment, setOwnedEquipment] = useState<Equipment[]>([]);
  const [equippedItems, setEquippedItems] = useState<Equipment[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [showCasino, setShowCasino] = useState<boolean>(false);

  useEffect(() => {
    const progress = getPlayerProgress(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    setCurrentGold(progress.gold);

    setOwnedEquipment(getOwnedEquipment());
    setEquippedItems(getEquippedItems());
    setAvailableForPurchase(getAvailableForPurchaseEquipment());
  }, []);

  const refreshShopData = () => {
    const progress = getPlayerProgress();
    setCurrentGold(progress.gold);
    setOwnedEquipment(getOwnedEquipment());
    setEquippedItems(getEquippedItems());
    setAvailableForPurchase(getAvailableForPurchaseEquipment());
  };

  const handlePurchase = (itemToPurchase: Equipment) => {
    let progress = getPlayerProgress(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å

    if (progress.gold < itemToPurchase.price) {
      setErrorMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!');
      setTimeout(() => setErrorMessage(''), 2000);
      return;
    }

    // –í—ã—á–∏—Ç–∞–µ–º –∑–æ–ª–æ—Ç–æ
    progress.gold -= itemToPurchase.price;
    savePlayerProgress(progress); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–∑–æ–ª–æ—Ç–æ)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    const updatedOwned = addOwnedItem(itemToPurchase);
    setOwnedEquipment(updatedOwned);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    setAvailableForPurchase(getAvailableForPurchaseEquipment());
    setCurrentGold(progress.gold); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –≤ UI

    // Note: playerProgress passed to onEquipmentPurchased might be stale here if it was from props.
    // It's better to pass the 'progress' variable that was just updated.
    onEquipmentPurchased(progress); 
    setErrorMessage('');
  };
  
  const handleEquipmentChange = (item: Equipment, action: 'equip' | 'unequip') => {
    if (action === 'equip') {
      const result = equipItemService(item, ownedEquipment); 
      if (result.success) {
        setEquippedItems(result.equipped);
      } else if (result.message) { // Check for message only on equip action result
        setErrorMessage(result.message);
        setTimeout(() => setErrorMessage(''), 2000);
      }
    } else { // action === 'unequip'
      const result = unequipItemService(item.id); // This result does not have a 'message' property
      if (result.success) {
        setEquippedItems(result.equipped);
      }
      // If unequipItemService could fail with a message, its return type and handling here would need adjustment.
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–∑–∏–Ω–æ
  const toggleCasino = () => {
    setShowCasino(prev => !prev);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –∫–∞–∑–∏–Ω–æ
  const handleCasinoWin = (amount: number) => {
    const updatedProgress = addRewards(0, amount); // addRewards —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    // Note: playerProgress passed to onEquipmentPurchased might be stale here if it was from props.
    // It's better to pass the 'updatedProgress' variable that was just updated.
    onEquipmentPurchased(updatedProgress);
    refreshShopData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞
  };

  const filteredEquipment = selectedCategory === 'all' 
    ? availableForPurchase
    : availableForPurchase.filter(item => item.type === selectedCategory);

  return (
    <div className="shop-container" style={{ position: 'relative' }}>
      <div className="shop-header">
        <h1>–ú–∞–≥–∞–∑–∏–Ω —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</h1>
        <button className="menu-button-shop" onClick={onReturnToMenu}>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</button>
      </div>

      <div className="shop-content">
        <div className="character-preview">
          <Character 
            equipment={equippedItems} 
            ownedEquipment={ownedEquipment} // –ü–µ—Ä–µ–¥–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
            // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É TypeScript –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ç–∏–ø onEquipmentChange
            // –≤ CharacterProps (–≤ —Ñ–∞–π–ª–µ Character.tsx) –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:
            // (item: Equipment, action: 'equip' | 'unequip') => void;
            onEquipmentChange={handleEquipmentChange} 
            showEquipControls={true}
          />
          <div className="player-gold">
            <span className="gold-icon">üí∞</span>
            <span className="gold-amount">{currentGold}</span> {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º currentGold */}
          </div>
        </div>

        <div className="shop-items">
          <div className="category-filter">
            <button 
              className={`category-button ${selectedCategory === 'all' ? 'active' : ''}`}
              onClick={() => setSelectedCategory('all')}
            >
              –í—Å–µ
            </button>
            <button 
              className={`category-button ${selectedCategory === 'weapon' ? 'active' : ''}`}
              onClick={() => setSelectedCategory('weapon')}
            >
              –û—Ä—É–∂–∏–µ
            </button>
            <button 
              className={`category-button ${selectedCategory === 'armor' ? 'active' : ''}`}
              onClick={() => setSelectedCategory('armor')}
            >
              –ë—Ä–æ–Ω—è
            </button>
            <button 
              className={`category-button ${selectedCategory === 'accessory' ? 'active' : ''}`}
              onClick={() => setSelectedCategory('accessory')}
            >
              –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
            </button>
          </div>

          {errorMessage && <div className="error-message">{errorMessage === 'Not enough gold!' ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!' : errorMessage === 'Failed to purchase item' ? '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç' : errorMessage}</div>}

          <div className="equipment-grid">
            {filteredEquipment.map(item => {
              // const isOwned = ownedEquipment.some(equip => equip.id === item.id); // –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –≤ availableForPurchase
              return (
                <div key={item.id} className={`equipment-item`}> {/* –£–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Å 'owned', —Ç.–∫. –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ */}
                  <div className="equipment-icon">{item.icon}</div>
                  <div className="equipment-details">
                    <h3>{item.name}</h3>
                    <p className="equipment-description">{item.description}</p>
                    <div className="equipment-stats">
                      {item.stats.map((stat: string, index: number) => (
                        <span key={index} className="stat">{stat}</span>
                      ))}
                    </div>
                  </div>
                  <div className="equipment-price">
                    <span className="gold-icon">üí∞</span>
                    <span>{item.price}</span>
                  </div>
                  <button 
                    className="purchase-button" 
                    onClick={() => handlePurchase(item)}
                    disabled={currentGold < item.price} // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ currentGold
                  >
                    –ö—É–ø–∏—Ç—å
                  </button>
                </div>
              );
            })}
          </div>
        </div>
      </div>
      
      {/* –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∫–∞–∑–∏–Ω–æ */}
      <button 
        className="secret-casino-button" 
        onClick={toggleCasino} 
        aria-label="Secret Casino"
      />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–∑–∏–Ω–æ */}
      {showCasino && (
        <Casino onClose={toggleCasino} onWin={handleCasinoWin} />
      )}
    </div>
  );
};

export default Shop;