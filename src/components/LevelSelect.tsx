import React from 'react';
import './LevelSelect.css';
import PlayerStats from './PlayerStats';
import { PlayerProgress } from '../services/playerService'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø
import OverallStatsModal from './level_select/OverallStatsModal';
import { getOverallStats, OverallPlayerStats } from '../services/overallStatsService';
import { useState } from 'react';
// import { GamePlayConfig } from './GamePlay'; // <--- –£–î–ê–õ–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
import { LevelConfig, ContentType, Language } from '../types'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ LevelConfig –∏ Language –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã

// –£–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–ª–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã
// export type Language = 'en' | 'ru' | 'code' | 'key-combos' | 'simple-words' | 'phrases' | 'math' | 'paragraphs' | 'mixed' | 'keyboard-training';

// interface Level {
//   id: number;
//   name: string;
//   config: GamePlayConfig;
// }

// const levels: Level[] = [ ... ]; // <-- –£–î–ê–õ–ò–¢–¨ –í–ï–°–¨ –ú–ê–°–°–ò–í levels

interface LevelSelectProps {
  levelsToDisplay?: LevelConfig[];
  onLevelSelect?: (level: LevelConfig) => void;
  onTrackSelect?: (track: ContentType) => void; // <-- –°–î–ï–õ–ê–ù–û –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ú
  completedLevels: string[];
  playerProgress: PlayerProgress;
  onOpenShop: () => void;
  onBackToTrackSelect?: () => void;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º trainingRoomLevelConfig –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const trainingRoomLevelConfig: LevelConfig = {
  id: 0,
  name: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
  description: '–û—Ç—Ç–∞—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!',
  language: Language.EN,
  contentType: ContentType.KeyCombos,
  monsterHealth: 0,
  monsterRegeneration: 0,
  monsterHealOnMistake: 0,
  damageAmount: 0,
  backgroundImage: '',
  monsterImage: '',
  monsterDamage: 0, // Added missing property
  attackInterval: 0, // Added missing property
  levelContent: [],
  timeLimit: 0,
  experienceReward: 0,
  goldReward: 0,
  isSpecial: true
};

const LevelSelect: React.FC<LevelSelectProps> = ({ 
  levelsToDisplay, 
  onLevelSelect, 
  onTrackSelect, 
  completedLevels, 
  playerProgress, 
  onOpenShop,
  onBackToTrackSelect
}) => {
  const [showStatsModal, setShowStatsModal] = useState<boolean>(false);
  const [overallStats, setOverallStats] = useState<OverallPlayerStats | null>(null);

  const handleOpenOverallStats = () => {
    setOverallStats(getOverallStats());
    setShowStatsModal(true);
  };

  return (
    <div className="level-select">
      <h1>{levelsToDisplay ? '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å' : '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ'}</h1>

      {levelsToDisplay && onBackToTrackSelect && (
        <button onClick={onBackToTrackSelect} className="back-button">
          –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–∫–∞
        </button>
      )}

      <div className="top-section-wrapper">
        <PlayerStats
          playerProgress={playerProgress}
          onOpenShop={onOpenShop}
          onOpenOverallStats={handleOpenOverallStats} 
        />
        
        {!levelsToDisplay && onLevelSelect && (
          <div className="training-room-shortcut-card">
            <div className="level-title">{trainingRoomLevelConfig.name}</div>
            <div className="training-icon-small">üèãÔ∏è</div>
            <div className="level-content-small">{trainingRoomLevelConfig.description}</div>
            <button
              className="level-start-btn training-start-btn"
              onClick={() => onLevelSelect(trainingRoomLevelConfig)} 
            >
              –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </button>
          </div>
        )}
      </div>

      {showStatsModal && overallStats && (
        <OverallStatsModal stats={overallStats} onClose={() => setShowStatsModal(false)} />
      )}
      
      {levelsToDisplay && onLevelSelect ? (
        <div className="level-path-rect">
          {levelsToDisplay.map((level) => {
            const isCompleted = completedLevels.includes(level.id.toString());
            const stats = playerProgress.levelStats?.[level.id.toString()];
            return (
              <div key={level.id} className={`level-card-rect ${isCompleted ? 'completed' : ''}`}>
                <div className="level-title">{level.name}</div>
                {level.difficulty && (
                  <div className={`level-difficulty ${level.difficulty.toLowerCase()}`}>
                    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {level.difficulty}
                  </div>
                )}
                <div className="level-content">–û–ø–∏—Å–∞–Ω–∏–µ: {level.description}</div>
                <div className="level-stats">
                  {stats ? (
                    <>
                      <div>–°–∫–æ—Ä–æ—Å—Ç—å: <b>{stats.speed.toFixed(2)} –∑–Ω./–º–∏–Ω</b></div>
                      <div>–¢–æ—á–Ω–æ—Å—Ç—å: <b>{stats.accuracy.toFixed(2)}%</b></div>
                      {stats.errorChars && stats.errorChars.length > 0 && (
                        <div>–û—à–∏–±–∫–∏: <b>{stats.errorChars.join(', ')}</b></div>
                      )}
                    </>
                  ) : (
                    <div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                  )}
                </div>
                <button
                  className="level-start-btn"
                  onClick={() => onLevelSelect(level)} 
                >
                  –ù–∞—á–∞—Ç—å
                </button>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="track-selection">
          <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:</h2>
          <div className="track-buttons">
            {onTrackSelect && (
              <>
                <button onClick={() => onTrackSelect(ContentType.RUSSIAN_TRACK)} className="track-button russian-track">
                  <span className="track-title">–†—É—Å—Å–∫–∏–π —è–∑—ã–∫</span>
                  <span className="track-description">–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.</span>
                </button>
                <button onClick={() => onTrackSelect(ContentType.ENGLISH_TRACK)} className="track-button english-track">
                  <span className="track-title">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫</span>
                  <span className="track-description">–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.</span>
                </button>
                <button onClick={() => onTrackSelect(ContentType.CODE_TRACK)} className="track-button code-track">
                  <span className="track-title">–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                  <span className="track-description">–ù–∞–±–∏—Ä–∞–π—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.</span>
                </button>
                <button onClick={() => onTrackSelect(ContentType.MATH_TRACK)} className="track-button math-track">
                  <span className="track-title">–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</span>
                  <span className="track-description">–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –Ω–∞–±–æ—Ä–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.</span>
                </button>
                <button onClick={() => onTrackSelect(ContentType.DYNAMIC_CONTENT_TRACK)} className="track-button dynamic-content-track">
                  <span className="track-title">–ú–µ–Ω—è—é—â–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç</span>
                  <span className="track-description">–£—Ä–æ–≤–Ω–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.</span>
                </button>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default LevelSelect;
